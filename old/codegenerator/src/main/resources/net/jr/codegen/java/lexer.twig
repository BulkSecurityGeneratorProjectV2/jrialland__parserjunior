{% if packageName %}package {{packageName}};{% endif %}

import java.io.Reader;
import java.io.PushbackReader;
import java.io.IOException;

import java.util.function.Consumer;

import java.util.Set;
import java.util.TreeSet;
import javax.annotation.Generated;

@Generated("parserjunior-codegenerator:1.0-SNAPSHOT")
public class Lexer {

    public enum TokenType {
        tok_eof({{is_eof_filtered}}),
        {% for t in lexer.tokenTypes %}
        tok_{{t.name}}({{lexer.isFilteredOut(t)}}){{(loop.last)?'':','}}
        {% endfor %}
        ;

        private boolean filtered;

        TokenType(boolean filtered) {
            this.filtered = filtered;
        }

        public boolean isFiltered() {
            return filtered;
        }

    }

    public static class Token {

        private TokenType tokenType;

        private String matchedText;

        private int line;

        private int column;

        public Token(TokenType tokenType, String matchedText, int line, int column) {
            this.tokenType = tokenType;
            this.matchedText = matchedText;
            this.line = line;
            this.column = column;
        }

        TokenType getTokenType() {
            return tokenType;
        }

        String getMatchedText() {
            return matchedText;
        }

        public int getLine() {
            return line;
        }

        public int getColumn() {
            return column;
        }

        public String toString() {
            return tokenType.name()+"@"+line+":"+column;
        }
    }

    private static class LexerState {
        Set<Integer> currentStates = new TreeSet<Integer>();
        Set<Integer> nextStates = new TreeSet<Integer>();
        int startLine = 1, line = 1, startColumn = 1, column = 1;
        TokenType candidate = null;
        String matchedText = "";

        public LexerState() {
            currentStates.add(0);
        }

        public void prepareNextStep() {
            Set<Integer> tmp = currentStates;
            currentStates = nextStates;
            tmp.clear();
            nextStates = tmp;
        }
    }

    public void lex(Reader reader, Consumer<Token> consumer) throws IOException {
        final PushbackReader pbReader = reader instanceof PushbackReader ? (PushbackReader) reader : new PushbackReader(reader);
        final LexerState lexerState = new LexerState();
        while(step(pbReader, lexerState, consumer)) {
            lexerState.prepareNextStep();
        }
    }

    private boolean step(PushbackReader reader, LexerState lexerState, Consumer<Token> consumer) throws IOException {

        int c = reader.read();
        if (c == -1) {
            if(lexerState.candidate == null) {
                if(lexerState.currentStates.size() != 1 || lexerState.currentStates.iterator().next() != 0) {
                    throw new IllegalStateException(String.format("lexical error at line %d, column %d", lexerState.line, lexerState.column));
                }
            } else {
                if(!lexerState.candidate.isFiltered()) {
                    consumer.accept(new Token(lexerState.candidate, lexerState.matchedText, lexerState.startLine, lexerState.startColumn));
                }
            }

            {% if not is_eof_filtered %}
            consumer.accept(new Token(TokenType.tok_eof, "", lexerState.line, lexerState.column+1));
            {% endif %}
            return false;
        }


        int priority = -1;
        TokenType newCandidate = null;
        lexerState.matchedText += (char)c;

        for(int state : lexerState.currentStates) {
            switch(state) {
                {% for state in states %}
                {% if not (state.outgoingTransitions is empty) %}
                case {{ state.id }} :
                    {% for transition in state.outgoingTransitions %}
                    if({{ transition.condition}}) {
                        lexerState.nextStates.add({{ transition.nextState.id }});
                        {% if transition.nextState.finalState %}
                        if(priority < {{transition.nextState.terminal.priority}}) {
                            priority = {{transition.nextState.terminal.priority}};
                            newCandidate = TokenType.tok_{{ transition.nextState.terminal.name }};
                        }
                        {% endif %}
                    }
                    {% endfor %}
                    break;
                {% endif %}
                {% endfor %}
            }
        }

        if(lexerState.nextStates.isEmpty()) {
            if(lexerState.candidate == null) {
                throw new IllegalStateException(String.format("lexical error at line %d, column %d", lexerState.line, lexerState.column));
            } else {

                if(!lexerState.candidate.isFiltered()) {
                    consumer.accept(new Token(lexerState.candidate, lexerState.matchedText, lexerState.startLine, lexerState.startColumn));
                }

                lexerState.candidate = null;
                lexerState.matchedText = "";
                lexerState.nextStates.add(0);
                reader.unread(c);
                lexerState.startLine = lexerState.line;
                lexerState.startColumn = lexerState.column;
                return true;
            }
        }

        lexerState.candidate = newCandidate;

        if(c=='\n') {
            lexerState.line += 1;
            lexerState.column = 1;
        } else {
            lexerState.column +=1;
        }

        return true;

    }
}
